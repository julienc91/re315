<?xml version='1.0'?>
<?xml-stylesheet type="text/xsl" href="http://docbook.sourceforge.net/release/xsl/current/xhtml/docbook.xsl"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<refentry id="udev">
  <refentryinfo>
    <title>udev</title>
    <productname>systemd</productname>
    <authorgroup>
      <author>
        <contrib>Developer</contrib>
        <firstname>Greg</firstname>
        <surname>Kroah-Hartmann</surname>
        <email>greg@kroah.com</email>
      </author>
      <author>
        <contrib>Developer</contrib>
        <firstname>Kay</firstname>
        <surname>Sievers</surname>
        <email>kay@vrfy.org</email>
      </author>
    </authorgroup>
  </refentryinfo>

  <refmeta>
    <refentrytitle>udev</refentrytitle>
    <manvolnum>7</manvolnum>
  </refmeta>

  <refnamediv>
    <refname>udev</refname>
    <refpurpose>Dynamic device management</refpurpose>
  </refnamediv>

  <refsect1><title>Description</title>
    <para>udev supplies the system software with device events, manages permissions
    of device nodes and may create additional symlinks in the <filename>/dev</filename>
    directory, or renames network interfaces. The kernel usually just assigns unpredictable
    device names based on the order of discovery. Meaningful symlinks or network device
    names provide a way to reliably identify devices based on their properties or
    current configuration.</para>

    <para>The udev daemon, <citerefentry><refentrytitle>systemd-udevd.service</refentrytitle>
    <manvolnum>8</manvolnum></citerefentry>, receives device uevents directly from
    the kernel whenever a device is added or removed from the system, or it changes its
    state. When udev receives a device event, it matches its configured set of rules
    against various device attributes to identify the device. Rules that match may
    provide additional device information to be stored in the udev database or
    to be used to create meaningful symlink names.</para>

    <para>All device information udev processes is stored in the udev database and
    sent out to possible event subscribers. Access to all stored data and the event
    sources is provided by the library libudev.</para>
  </refsect1>

  <refsect1><title>Rules Files</title>
      <para>The udev rules are read from the files located in the
      system rules directory <filename>/usr/lib/udev/rules.d</filename>,
      the volatile runtime directory <filename>/run/udev/rules.d</filename>
      and the local administration directory <filename>/etc/udev/rules.d</filename>.
      All rules files are collectively sorted and processed in lexical order,
      regardless of the directories in which they live. However, files with
      identical filenames replace each other. Files in <filename>/etc</filename>
      have the highest priority, files in <filename>/run</filename> take precedence
      over files with the same name in <filename>/usr/lib</filename>. This can be
      used to override a system-supplied rules file with a local file if needed;
      a symlink in <filename>/etc</filename> with the same name as a rules file in
      <filename>/usr/lib</filename>, pointing to <filename>/dev/null</filename>,
      disables the rules file entirely. Rule files must have the extension
      <filename>.rules</filename>; other extensions are ignored.</para>

      <para>Every line in the rules file contains at least one key-value pair.
      Except for empty lines or lines beginning with <literal>#</literal>, which are ignored.
      There are two kinds of keys: match and assignment.
      If all match keys match against their values, the rule gets applied and the
      assignment keys get the specified values assigned.</para>

      <para>A matching rule may rename a network interface, add symlinks
      pointing to the device node, or run a specified program as part of
      the event handling.</para>

      <para>A rule consists of a comma-separated list of one or more key-value pairs.
      Each key has a distinct operation, depending on the used operator. Valid
      operators are:</para>
      <variablelist>
        <varlistentry>
          <term><literal>==</literal></term>
          <listitem>
            <para>Compare for equality.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>!=</literal></term>
          <listitem>
            <para>Compare for inequality.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>=</literal></term>
          <listitem>
            <para>Assign a value to a key. Keys that represent a list are reset
            and only this single value is assigned.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>+=</literal></term>
          <listitem>
            <para>Add the value to a key that holds a list of entries.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><literal>:=</literal></term>
          <listitem>
            <para>Assign  a  value  to  a key finally; disallow any later changes.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The following key names can be used to match against device properties.
      Some of the keys also match against properties of the parent devices in sysfs,
      not only the device that has generated the event. If multiple keys that match
      a parent device are specified in a single rule, all these keys must match at
      one and the same parent device.</para>
      <variablelist class='udev-directives'>
        <varlistentry>
          <term><varname>ACTION</varname></term>
          <listitem>
            <para>Match the name of the event action.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>DEVPATH</varname></term>
          <listitem>
            <para>Match the devpath of the event device.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>KERNEL</varname></term>
          <listitem>
            <para>Match the name of the event device.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>NAME</varname></term>
          <listitem>
            <para>Match the name of a network interface. It can be used once the
            NAME key has been set in one of the preceding rules.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>SYMLINK</varname></term>
          <listitem>
            <para>Match the name of a symlink targeting the node. It can
            be used once a SYMLINK key has been set in one of the preceding
            rules. There may be multiple symlinks; only one needs to match.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>SUBSYSTEM</varname></term>
          <listitem>
            <para>Match the subsystem of the event device.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>DRIVER</varname></term>
          <listitem>
            <para>Match the driver name of the event device. Only set this key for devices
            which are bound to a driver at the time the event is generated.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>ATTR{<replaceable>filename</replaceable>}</varname></term>
          <listitem>
            <para>Match sysfs attribute values of the event device. Trailing
            whitespace in the attribute values is ignored unless the specified match
            value itself contains trailing whitespace.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>KERNELS</varname></term>
          <listitem>
            <para>Search the devpath upwards for a matching device name.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>SUBSYSTEMS</varname></term>
          <listitem>
            <para>Search the devpath upwards for a matching device subsystem name.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>DRIVERS</varname></term>
          <listitem>
            <para>Search the devpath upwards for a matching device driver name.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>ATTRS{<replaceable>filename</replaceable>}</varname></term>
          <listitem>
            <para>Search the devpath upwards for a device with matching sysfs attribute values.
            If multiple <varname>ATTRS</varname> matches are specified, all of them
            must match on the same device. Trailing whitespace in the attribute values is ignored
            unless the specified match value itself contains trailing whitespace.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>TAGS</varname></term>
          <listitem>
            <para>Search the devpath upwards for a device with matching tag.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>ENV{<replaceable>key</replaceable>}</varname></term>
          <listitem>
            <para>Match against a device property value.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>TAG</varname></term>
          <listitem>
            <para>Match against a device tag.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>TEST{<replaceable>octal mode mask</replaceable>}</varname></term>
          <listitem>
            <para>Test the existence of a file. An octal mode mask can be specified
            if needed.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>PROGRAM</varname></term>
          <listitem>
            <para>Execute a program to determine whether there
            is a match; the key is true if the program returns
            successfully. The device properties are made available to the
            executed program in the environment. The program's stdout
            is available in the RESULT key.</para>
            <para>This can only be used for very short-running foreground tasks. For details
            see <varname>RUN</varname>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>RESULT</varname></term>
          <listitem>
            <para>Match the returned string of the last PROGRAM call. This key can
            be used in the same or in any later rule after a PROGRAM call.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Most of the fields support shell glob pattern matching. The following
      pattern characters are supported:</para>
      <variablelist>
        <varlistentry>
          <term><literal>*</literal></term>
          <listitem>
            <para>Matches zero or more characters.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>?</literal></term>
          <listitem>
            <para>Matches any single character.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>[]</literal></term>
          <listitem>
            <para>Matches any single character specified within the brackets. For
            example, the pattern string <literal>tty[SR]</literal>
            would match either <literal>ttyS</literal> or <literal>ttyR</literal>.
            Ranges are also supported via the <literal>-</literal> character.
            For example, to match on the range of all digits, the pattern [0-9] could
            be used. If the first character following the <literal>[</literal> is a
            <literal>!</literal>, any characters not enclosed are matched.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The following keys can get values assigned:</para>
      <variablelist class='udev-directives'>
        <varlistentry>
          <term><varname>NAME</varname></term>
          <listitem>
            <para>The name to use for a network interface. The name of a device node
            cannot be changed by udev, only additional symlinks can be created.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>SYMLINK</varname></term>
          <listitem>
            <para>The name of a symlink targeting the node. Every matching rule adds
            this value to the list of symlinks to be created.</para>
            <para>The set of characters to name a symlink is limited. Allowed
            characters are <literal>0-9A-Za-z#+-.:=@_/</literal>, valid UTF-8 character
            sequences, and <literal>\x00</literal> hex encoding. All other
            characters are replaced by a <literal>_</literal> character.</para>
            <para>Multiple symlinks may be specified by separating the names by the
            space character. In case multiple devices claim the same name, the link
            always points to the device with the highest link_priority. If the current
            device goes away, the links are re-evaluated and the device with the
            next highest link_priority becomes the owner of the link. If no
            link_priority is specified, the order of the devices (and which one of
            them owns the link) is undefined.</para>
            <para>Symlink names must never conflict with the kernel's default device
            node names, as that would result in unpredictable behavior.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>OWNER</varname>, <varname>GROUP</varname>, <varname>MODE</varname></term>
          <listitem>
            <para>The permissions for the device node. Every specified value overrides
            the compiled-in default value.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>SECLABEL{<replaceable>module</replaceable>}</varname></term>
          <listitem>
            <para>Applies the specified Linux Security Module label to the device node.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>ATTR{<replaceable>key</replaceable>}</varname></term>
          <listitem>
            <para>The value that should be written to a sysfs attribute of the
            event device.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>ENV{<replaceable>key</replaceable>}</varname></term>
          <listitem>
            <para>Set a device property value. Property names with a leading <literal>.</literal>
            are neither stored in the database nor exported to events or
            external tools (run by, say, the PROGRAM match key).</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>TAG</varname></term>
          <listitem>
            <para>Attach a tag to a device. This is used to filter events for users
            of libudev's monitor functionality, or to enumerate a group of tagged
            devices. The implementation can only work efficiently if only a few
            tags are attached to a device. It is only meant to be used in
            contexts with specific device filter requirements, and not as a
            general-purpose flag. Excessive use might result in inefficient event
            handling.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>RUN{<replaceable>type</replaceable>}</varname></term>
          <listitem>
            <para>Add a program to the list of programs to be executed after processing all the
            rules for a specific event, depending on <literal>type</literal>:</para>
            <variablelist>
              <varlistentry>
                <term><literal>program</literal></term>
                <listitem>
                  <para>Execute an external program specified as the assigned
                  value. If no absolute path is given, the program is expected to live in
                  /usr/lib/udev, otherwise the absolute path must be specified.</para>
                  <para>This is the default if no <replaceable>type</replaceable> is
                  specified.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>builtin</literal></term>
                <listitem>
                  <para>As <varname>program</varname>, but use one of the built-in programs rather
                  than an external one.</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <para>The program name and following arguments are separated by spaces.
            Single quotes can be used to specify arguments with spaces.</para>
            <para>This can only be used for very short-running foreground tasks. Running an
            event process for a long period of time may block all further events for
            this or a dependent device.</para>
            <para>Starting daemons or other long running processes is not appropriate
            for udev; the forked processes, detached or not, will be unconditionally
            killed after the event handling has finished.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>LABEL</varname></term>
          <listitem>
            <para>A named label to which a GOTO may jump.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>GOTO</varname></term>
          <listitem>
            <para>Jumps to the next LABEL with a matching name.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>IMPORT{<replaceable>type</replaceable>}</varname></term>
          <listitem>
            <para>Import a set of variables as device properties,
            depending on <literal>type</literal>:</para>
            <variablelist>
              <varlistentry>
                <term><literal>program</literal></term>
                <listitem>
                  <para>Execute an external program specified as the assigned value and
                  import its output, which must be in environment key
                  format. Path specification, command/argument separation,
                  and quoting work like in <varname>RUN</varname>.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>builtin</literal></term>
                <listitem>
                  <para>Similar to <literal>program</literal>, but use one of the
                  built-in programs rather than an external one.</para>
                </listitem>
              </varlistentry>
             <varlistentry>
                <term><literal>file</literal></term>
                <listitem>
                  <para>Import a text file specified as the assigned value, the content
                  of which must be in environment key format.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>db</literal></term>
                <listitem>
                  <para>Import a single property specified as the assigned value from the
                  current device database. This works only if the database is already populated
                  by an earlier event.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>cmdline</literal></term>
                <listitem>
                  <para>Import a single property from the kernel command line. For simple flags
                  the value of the property is set to <literal>1</literal>.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>parent</literal></term>
                <listitem>
                  <para>Import the stored keys from the parent device by reading
                  the database entry of the parent device. The value assigned to
                  <option>IMPORT{parent}</option> is used as a filter of key names
                  to import (with the same shell glob pattern matching used for
                  comparisons).</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <para>This can only be used for very short-running foreground tasks. For details
            see <option>RUN</option>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>WAIT_FOR</varname></term>
          <listitem>
            <para>Wait for a file to become available or until a timeout of
            10 seconds expires. The path is relative to the sysfs device;
            if no path is specified, this waits for an attribute to appear.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><varname>OPTIONS</varname></term>
          <listitem>
            <para>Rule and device options:</para>
            <variablelist class='udev-directives'>
              <varlistentry>
                <term><option>link_priority=<replaceable>value</replaceable></option></term>
                <listitem>
                  <para>Specify the priority of the created symlinks. Devices with higher
                  priorities overwrite existing symlinks of other devices. The default is 0.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><option>event_timeout=</option></term>
                <listitem>
                  <para>Number of seconds an event waits for operations to finish before
                  giving up and terminating itself.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><option>string_escape=<replaceable>none|replace</replaceable></option></term>
                <listitem>
                  <para>Usually control and other possibly unsafe characters are replaced
                  in strings used for device naming. The mode of replacement can be specified
                  with this option.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><option>static_node=</option></term>
                <listitem>
                  <para>Apply the permissions specified in this rule to the static device node with
                  the specified name. Also, for every tag specified in this rule, create a symlink
                  in the directory
                  <filename>/run/udev/static_node-tags/<replaceable>tag</replaceable></filename>
                  pointing at the static device node with the specified name. Static device node
                  creation is performed by systemd-tmpfiles before systemd-udevd is started. The
                  static nodes might not have a corresponding kernel device; they are used to
                  trigger automatic kernel module loading when they are accessed.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><option>watch</option></term>
                <listitem>
                  <para>Watch the device node with inotify; when the node is closed after being opened for
                  writing, a change uevent is synthesized.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><option>nowatch</option></term>
                <listitem>
                  <para>Disable the watching of a device node with inotify.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The <varname>NAME</varname>, <varname>SYMLINK</varname>, <varname>PROGRAM</varname>,
      <varname>OWNER</varname>, <varname>GROUP</varname>, <varname>MODE</varname>  and  <varname>RUN</varname>
      fields support simple string substitutions. The <varname>RUN</varname>
      substitutions are performed after all rules have been processed, right before the program
      is executed, allowing for the use of device properties set by earlier matching
      rules. For all other fields, substitutions are performed while the individual rule is
      being processed. The available substitutions are:</para>
      <variablelist class='udev-directives'>
        <varlistentry>
          <term><option>$kernel</option>, <option>%k</option></term>
          <listitem>
            <para>The kernel name for this device.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>$number</option>, <option>%n</option></term>
          <listitem>
            <para>The kernel number for this device. For example,
            <literal>sda3</literal> has kernel number <literal>3</literal>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>$devpath</option>, <option>%p</option></term>
          <listitem>
            <para>The devpath of the device.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>$id</option>, <option>%b</option></term>
          <listitem>
            <para>The name of the device matched while searching the devpath upwards for
              <option>SUBSYSTEMS</option>, <option>KERNELS</option>, <option>DRIVERS</option> and <option>ATTRS</option>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>$driver</option></term>
          <listitem>
            <para>The driver name of the device matched while searching the devpath upwards for
              <option>SUBSYSTEMS</option>, <option>KERNELS</option>, <option>DRIVERS</option> and <option>ATTRS</option>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>$attr{<replaceable>file</replaceable>}</option>, <option>%s{<replaceable>file</replaceable>}</option></term>
          <listitem>
            <para>The value of a sysfs attribute found at the device where
            all keys of the rule have matched. If the matching device does not have
            such an attribute, and a previous KERNELS, SUBSYSTEMS, DRIVERS, or
            ATTRS test selected a parent device, then the attribute from that
            parent device is used.</para>
            <para>If the attribute is a symlink, the last element of the symlink target is
            returned as the value.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>$env{<replaceable>key</replaceable>}</option>, <option>%E{<replaceable>key</replaceable>}</option></term>
          <listitem>
            <para>A device property value.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>$major</option>, <option>%M</option></term>
          <listitem>
            <para>The kernel major number for the device.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>$minor</option>, <option>%m</option></term>
          <listitem>
            <para>The kernel minor number for the device.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>$result</option>, <option>%c</option></term>
          <listitem>
            <para>The string returned by the external program requested with PROGRAM.
            A single part of the string, separated by a space character, may be selected
            by specifying the part number as an attribute: <literal>%c{N}</literal>.
            If the number is followed by the <literal>+</literal> character, this part plus all remaining parts
            of the result string are substituted: <literal>%c{N+}</literal>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>$parent</option>, <option>%P</option></term>
          <listitem>
            <para>The node name of the parent device.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>$name</option></term>
          <listitem>
            <para>The current name of the device. If not changed by a rule, it is the
            name of the kernel device.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>$links</option></term>
          <listitem>
            <para>A space-separated list of the current symlinks. The value is
            only set during a remove event or if an earlier rule assigned a value.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>$root</option>, <option>%r</option></term>
          <listitem>
            <para>The udev_root value.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>$sys</option>, <option>%S</option></term>
          <listitem>
            <para>The sysfs mount point.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>$devnode</option>, <option>%N</option></term>
          <listitem>
            <para>The name of the device node.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>%%</option></term>
          <listitem>
          <para>The <literal>%</literal> character itself.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>$$</option></term>
          <listitem>
          <para>The <literal>$</literal> character itself.</para>
          </listitem>
        </varlistentry>
      </variablelist>
  </refsect1>

  <refsect1><title>Hardware Database Files</title>
      <para>The hwdb files are read from the files located in the
      system hwdb directory <filename>/usr/lib/udev/hwdb.d</filename>,
      the volatile runtime directory <filename>/run/udev/hwdb.d</filename>
      and the local administration directory <filename>/etc/udev/hwdb.d</filename>.
      All hwdb files are collectively sorted and processed in lexical order,
      regardless of the directories in which they live. However, files with
      identical filenames replace each other. Files in <filename>/etc</filename>
      have the highest priority, files in <filename>/run</filename> take precedence
      over files with the same name in <filename>/usr/lib</filename>. This can be
      used to override a system-supplied hwdb file with a local file if needed;
      a symlink in <filename>/etc</filename> with the same name as a hwdb file in
      <filename>/usr/lib</filename>, pointing to <filename>/dev/null</filename>,
      disables the hwdb file entirely. hwdb files must have the extension
      <filename>.hwdb</filename>; other extensions are ignored.</para>

      <para>The hwdb file contains data records consisting of matches and
      associated key-value pairs. Every record in the hwdb starts with one or
      more match string, specifying a shell glob to compare the database
      lookup string against. Multiple match lines are specified in additional
      consecutive lines. Every match line is compared indivdually, they are
      combined by OR. Every match line must start at the first character of
      the line.</para>

      <para>The match lines are followed by one or more key-value pair lines, which
      are recognized by a leading space character. The key name and value are separated
      by <literal>=</literal>. An empty line signifies the end
      of a record. Lines beginning with <literal>#</literal> are ignored.</para>

      <para>The content of all hwdb files is read by
      <citerefentry><refentrytitle>udevadm</refentrytitle><manvolnum>8</manvolnum></citerefentry>
      and compiled to a binary database located at <filename>/etc/udev/hwdb.bin</filename>.
      During runtime only the binary database is used.</para>
  </refsect1>

  <refsect1><title>Network Link Configuration</title>
      <para>Network link configuration is performed by the <literal>net_setup_link</literal>
      udev builtin.</para>

      <para>The link files are read from the files located in the
      system network directory <filename>/usr/lib/systemd/network</filename>,
      the volatile runtime network directory <filename>/run/systemd/network</filename>
      and the local administration network directory <filename>/etc/systemd/network</filename>.
      Link files must have the extension <filename>.link</filename>; other extensions are ignored.
      All link files are collectively sorted and processed in lexical order,
      regardless of the directories in which they live. However, files with
      identical filenames replace each other. Files in <filename>/etc</filename>
      have the highest priority, files in <filename>/run</filename> take precedence
      over files with the same name in <filename>/usr/lib</filename>. This can be
      used to override a system-supplied link file with a local file if needed;
      a symlink in <filename>/etc</filename> with the same name as a link file in
      <filename>/usr/lib</filename>, pointing to <filename>/dev/null</filename>,
      disables the link file entirely.</para>

      <para>The link file contains a <literal>[Match]</literal> section, which
      determines if a given link file may be applied to a given device; and a
      <literal>[Link]</literal> section specifying how the device should be
      configured. The first (in lexical order) of the link files that matches
      a given device is applied.</para>

      <para>A link file is said to match a device if each of the entries in the
      <literal>[Match]</literal> section matches, or if the section is empty.
      The following keys are accepted:</para>

      <variablelist class='network-directives'>
        <varlistentry>
          <term><varname>MACAddress</varname></term>
          <listitem>
            <para>The hardware address.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>Path</varname></term>
          <listitem>
            <para>The persistent path, as exposed by the udev property <literal>ID_PATH</literal>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>Driver</varname></term>
          <listitem>
            <para>The driver currently bound to the device, as exposed by the udev property <literal>DRIVER</literal>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>Type</varname></term>
          <listitem>
            <para>The device type, as exposed by the udev property <literal>DEVTYPE</literal>.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The <literal>[Link]</literal> section accepts the following keys:</para>

      <variablelist class='network-directives'>
        <varlistentry>
          <term><varname>Description</varname></term>
          <listitem>
            <para>A description of the device.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>Alias</varname></term>
          <listitem>
            <para>The <literal>ifalias</literal> is set to this value.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>MACAddressPolicy</varname></term>
          <listitem>
            <para>The policy by which the MAC address should be set. The available policies are:</para>
            <variablelist>
              <varlistentry>
                <term><literal>persistent</literal></term>
                <listitem>
                  <para>If the hardware has a persistent MAC address, as most hardware should, and this is used by
                  the kernel, nothing is done. Otherwise, a new MAC address is generated which is guaranteed to be
                  the same on every boot for the given machine and the given device, but which is otherwise random.
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>random</literal></term>
                <listitem>
                  <para>If the kernel is using a random MAC address, nothing is done. Otherwise, a new address is
                  randomly generated each time the device appears, typically at boot.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>MACAddress</varname></term>
          <listitem>
            <para>The MAC address to use, if no <literal>MACAddressPolicy</literal> is specified.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>NamePolicy</varname></term>
          <listitem>
            <para>An ordered, space-separated list of policies by which the interface name should be set.
            <literal>NamePolicy</literal> may be disabeld by specifying <literal>net.ifnames=0</literal> on the
            kernel commandline. Each of the policies may fail, and the first successfull one is used. The name
            is not set directly, but exported to udev as the property <literal>ID_NET_NAME</literal>, which is
            by default used by an udev rule to set <literal>NAME</literal>. The available policies are:</para>
            <variablelist>
              <varlistentry>
                <term><literal>onboard</literal></term>
                <listitem>
                  <para>The name is set based on information given by the firmware for on-board devices, as
                  exported by the udev property <literal>ID_NET_NAME_ONBOARD</literal>.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>slot</literal></term>
                <listitem>
                  <para>The name is set based on information given by the firmware for hot-plug devices, as
                  exported by the udev property <literal>ID_NET_NAME_SLOT</literal>.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>path</literal></term>
                <listitem>
                  <para>The name is set based on the device's physical location, as exported by the udev
                  property <literal>ID_NET_NAME_PATH</literal>.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>mac</literal></term>
                <listitem>
                  <para>The name is set based on the device's persistent MAC address, as exported by the udev
                  property <literal>ID_NET_NAME_MAC</literal>.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>Name</varname></term>
          <listitem>
            <para>The interface name to use in case all the policies specified in <literal>NamePolicy</literal>
            fail, or in case <literal>NamePolicy</literal> is missing or disabled.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>MTU</varname></term>
          <listitem>
            <para>The MTU to set for the device.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>SpeedMBytes</varname></term>
          <listitem>
            <para>The speed to set for the device.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>Duplex</varname></term>
          <listitem>
            <para>The duplex mode to set for the device. The accepted values are <literal>half</literal> and
            <literal>full</literal>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>WakeOnLan</varname></term>
          <listitem>
            <para>The Wake-On-Lan policy to set for the device. The supported values are:</para>
            <variablelist>
              <varlistentry>
                <term><literal>phy</literal></term>
                <listitem>
                  <para>Wake on PHY activity.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>magic</literal></term>
                <listitem>
                  <para>Wake on receipt of magic packet.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>off</literal></term>
                <listitem>
                  <para>Never wake.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </listitem>
        </varlistentry>
      </variablelist>
  </refsect1>

  <refsect1>
    <title>See Also</title>
    <para><citerefentry>
        <refentrytitle>systemd-udevd.service</refentrytitle><manvolnum>8</manvolnum>
      </citerefentry>,
      <citerefentry>
        <refentrytitle>udevadm</refentrytitle><manvolnum>8</manvolnum>
    </citerefentry></para>
  </refsect1>
</refentry>
