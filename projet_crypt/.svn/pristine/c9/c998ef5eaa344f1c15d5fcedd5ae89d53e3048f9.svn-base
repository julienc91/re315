<MACRO>
<NAME>G_UDEV_TYPE_ENUMERATOR</NAME>
#define G_UDEV_TYPE_ENUMERATOR         (g_udev_enumerator_get_type ())
</MACRO>
<MACRO>
<NAME>G_UDEV_ENUMERATOR</NAME>
#define G_UDEV_ENUMERATOR(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), G_UDEV_TYPE_ENUMERATOR, GUdevEnumerator))
</MACRO>
<MACRO>
<NAME>G_UDEV_ENUMERATOR_CLASS</NAME>
#define G_UDEV_ENUMERATOR_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), G_UDEV_TYPE_ENUMERATOR, GUdevEnumeratorClass))
</MACRO>
<MACRO>
<NAME>G_UDEV_IS_ENUMERATOR</NAME>
#define G_UDEV_IS_ENUMERATOR(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), G_UDEV_TYPE_ENUMERATOR))
</MACRO>
<MACRO>
<NAME>G_UDEV_IS_ENUMERATOR_CLASS</NAME>
#define G_UDEV_IS_ENUMERATOR_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), G_UDEV_TYPE_ENUMERATOR))
</MACRO>
<MACRO>
<NAME>G_UDEV_ENUMERATOR_GET_CLASS</NAME>
#define G_UDEV_ENUMERATOR_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), G_UDEV_TYPE_ENUMERATOR, GUdevEnumeratorClass))
</MACRO>
<STRUCT>
<NAME>GUdevEnumerator</NAME>
struct _GUdevEnumerator
{
  GObject              parent;

  /*< private >*/
  GUdevEnumeratorPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GUdevEnumeratorClass</NAME>
struct _GUdevEnumeratorClass
{
  GObjectClass   parent_class;

  /*< private >*/
  /* Padding for future expansion */
  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
  void (*reserved5) (void);
  void (*reserved6) (void);
  void (*reserved7) (void);
  void (*reserved8) (void);
};
</STRUCT>
<FUNCTION>
<NAME>g_udev_enumerator_get_type</NAME>
<RETURNS>GType             </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_enumerator_new</NAME>
<RETURNS>GUdevEnumerator  *</RETURNS>
GUdevClient      *client 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_enumerator_add_match_subsystem</NAME>
<RETURNS>GUdevEnumerator  *</RETURNS>
GUdevEnumerator  *enumerator, const gchar      *subsystem 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_enumerator_add_nomatch_subsystem</NAME>
<RETURNS>GUdevEnumerator  *</RETURNS>
GUdevEnumerator  *enumerator, const gchar      *subsystem 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_enumerator_add_match_sysfs_attr</NAME>
<RETURNS>GUdevEnumerator  *</RETURNS>
GUdevEnumerator  *enumerator, const gchar      *name, const gchar      *value 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_enumerator_add_nomatch_sysfs_attr</NAME>
<RETURNS>GUdevEnumerator  *</RETURNS>
GUdevEnumerator  *enumerator, const gchar      *name, const gchar      *value 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_enumerator_add_match_property</NAME>
<RETURNS>GUdevEnumerator  *</RETURNS>
GUdevEnumerator  *enumerator, const gchar      *name, const gchar      *value 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_enumerator_add_match_name</NAME>
<RETURNS>GUdevEnumerator  *</RETURNS>
GUdevEnumerator  *enumerator, const gchar      *name 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_enumerator_add_match_tag</NAME>
<RETURNS>GUdevEnumerator  *</RETURNS>
GUdevEnumerator  *enumerator, const gchar      *tag 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_enumerator_add_match_is_initialized</NAME>
<RETURNS>GUdevEnumerator  *</RETURNS>
GUdevEnumerator  *enumerator 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_enumerator_add_sysfs_path</NAME>
<RETURNS>GUdevEnumerator  *</RETURNS>
GUdevEnumerator  *enumerator, const gchar      *sysfs_path 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_enumerator_execute</NAME>
<RETURNS>GList            *</RETURNS>
GUdevEnumerator  *enumerator 
</FUNCTION>
<STRUCT>
<NAME>GUdevEnumeratorPrivate</NAME>
</STRUCT>
<TYPEDEF>
<NAME>GUdevDeviceNumber</NAME>
typedef guint64 GUdevDeviceNumber; /* __UQUAD_TYPE */
</TYPEDEF>
<STRUCT>
<NAME>GUdevDevice</NAME>
</STRUCT>
<STRUCT>
<NAME>GUdevClient</NAME>
</STRUCT>
<STRUCT>
<NAME>GUdevEnumerator</NAME>
</STRUCT>
<ENUM>
<NAME>GUdevDeviceType</NAME>
typedef enum
{
  G_UDEV_DEVICE_TYPE_NONE = 0,
  G_UDEV_DEVICE_TYPE_BLOCK = 'b',
  G_UDEV_DEVICE_TYPE_CHAR = 'c',
} GUdevDeviceType;
</ENUM>
<MACRO>
<NAME>G_UDEV_TYPE_CLIENT</NAME>
#define G_UDEV_TYPE_CLIENT         (g_udev_client_get_type ())
</MACRO>
<MACRO>
<NAME>G_UDEV_CLIENT</NAME>
#define G_UDEV_CLIENT(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), G_UDEV_TYPE_CLIENT, GUdevClient))
</MACRO>
<MACRO>
<NAME>G_UDEV_CLIENT_CLASS</NAME>
#define G_UDEV_CLIENT_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), G_UDEV_TYPE_CLIENT, GUdevClientClass))
</MACRO>
<MACRO>
<NAME>G_UDEV_IS_CLIENT</NAME>
#define G_UDEV_IS_CLIENT(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), G_UDEV_TYPE_CLIENT))
</MACRO>
<MACRO>
<NAME>G_UDEV_IS_CLIENT_CLASS</NAME>
#define G_UDEV_IS_CLIENT_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), G_UDEV_TYPE_CLIENT))
</MACRO>
<MACRO>
<NAME>G_UDEV_CLIENT_GET_CLASS</NAME>
#define G_UDEV_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), G_UDEV_TYPE_CLIENT, GUdevClientClass))
</MACRO>
<STRUCT>
<NAME>GUdevClient</NAME>
struct _GUdevClient
{
  GObject              parent;

  /*< private >*/
  GUdevClientPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GUdevClientClass</NAME>
struct _GUdevClientClass
{
  GObjectClass   parent_class;

  /* signals */
  void (*uevent) (GUdevClient  *client,
                  const gchar  *action,
                  GUdevDevice  *device);

  /*< private >*/
  /* Padding for future expansion */
  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
  void (*reserved5) (void);
  void (*reserved6) (void);
  void (*reserved7) (void);
  void (*reserved8) (void);
};
</STRUCT>
<FUNCTION>
<NAME>g_udev_client_get_type</NAME>
<RETURNS>GType         </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_client_new</NAME>
<RETURNS>GUdevClient  *</RETURNS>
const gchar* const *subsystems 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_client_query_by_subsystem</NAME>
<RETURNS>GList        *</RETURNS>
GUdevClient        *client, const gchar        *subsystem 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_client_query_by_device_number</NAME>
<RETURNS>GUdevDevice  *</RETURNS>
GUdevClient        *client, GUdevDeviceType     type, GUdevDeviceNumber   number 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_client_query_by_device_file</NAME>
<RETURNS>GUdevDevice  *</RETURNS>
GUdevClient        *client, const gchar        *device_file 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_client_query_by_sysfs_path</NAME>
<RETURNS>GUdevDevice  *</RETURNS>
GUdevClient        *client, const gchar        *sysfs_path 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_client_query_by_subsystem_and_name</NAME>
<RETURNS>GUdevDevice  *</RETURNS>
GUdevClient        *client, const gchar        *subsystem, const gchar        *name 
</FUNCTION>
<STRUCT>
<NAME>GUdevClientPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>G_UDEV_TYPE_DEVICE</NAME>
#define G_UDEV_TYPE_DEVICE         (g_udev_device_get_type ())
</MACRO>
<MACRO>
<NAME>G_UDEV_DEVICE</NAME>
#define G_UDEV_DEVICE(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), G_UDEV_TYPE_DEVICE, GUdevDevice))
</MACRO>
<MACRO>
<NAME>G_UDEV_DEVICE_CLASS</NAME>
#define G_UDEV_DEVICE_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), G_UDEV_TYPE_DEVICE, GUdevDeviceClass))
</MACRO>
<MACRO>
<NAME>G_UDEV_IS_DEVICE</NAME>
#define G_UDEV_IS_DEVICE(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), G_UDEV_TYPE_DEVICE))
</MACRO>
<MACRO>
<NAME>G_UDEV_IS_DEVICE_CLASS</NAME>
#define G_UDEV_IS_DEVICE_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), G_UDEV_TYPE_DEVICE))
</MACRO>
<MACRO>
<NAME>G_UDEV_DEVICE_GET_CLASS</NAME>
#define G_UDEV_DEVICE_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), G_UDEV_TYPE_DEVICE, GUdevDeviceClass))
</MACRO>
<STRUCT>
<NAME>GUdevDevice</NAME>
struct _GUdevDevice
{
  GObject             parent;

  /*< private >*/
  GUdevDevicePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GUdevDeviceClass</NAME>
struct _GUdevDeviceClass
{
  GObjectClass parent_class;

  /*< private >*/
  /* Padding for future expansion */
  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
  void (*reserved5) (void);
  void (*reserved6) (void);
  void (*reserved7) (void);
  void (*reserved8) (void);
};
</STRUCT>
<FUNCTION>
<NAME>g_udev_device_get_type</NAME>
<RETURNS>GType                </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_is_initialized</NAME>
<RETURNS>gboolean             </RETURNS>
GUdevDevice  *device 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_usec_since_initialized</NAME>
<RETURNS>guint64              </RETURNS>
GUdevDevice  *device 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_subsystem</NAME>
<RETURNS>const gchar         *</RETURNS>
GUdevDevice  *device 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_devtype</NAME>
<RETURNS>const gchar         *</RETURNS>
GUdevDevice  *device 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_name</NAME>
<RETURNS>const gchar         *</RETURNS>
GUdevDevice  *device 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_number</NAME>
<RETURNS>const gchar         *</RETURNS>
GUdevDevice  *device 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_sysfs_path</NAME>
<RETURNS>const gchar         *</RETURNS>
GUdevDevice  *device 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_driver</NAME>
<RETURNS>const gchar         *</RETURNS>
GUdevDevice  *device 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_action</NAME>
<RETURNS>const gchar         *</RETURNS>
GUdevDevice  *device 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_seqnum</NAME>
<RETURNS>guint64              </RETURNS>
GUdevDevice  *device 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_device_type</NAME>
<RETURNS>GUdevDeviceType      </RETURNS>
GUdevDevice  *device 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_device_number</NAME>
<RETURNS>GUdevDeviceNumber    </RETURNS>
GUdevDevice  *device 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_device_file</NAME>
<RETURNS>const gchar         *</RETURNS>
GUdevDevice  *device 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_device_file_symlinks</NAME>
<RETURNS>const gchar * const *</RETURNS>
GUdevDevice  *device 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_parent</NAME>
<RETURNS>GUdevDevice         *</RETURNS>
GUdevDevice  *device 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_parent_with_subsystem</NAME>
<RETURNS>GUdevDevice         *</RETURNS>
GUdevDevice  *device, const gchar  *subsystem, const gchar  *devtype 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_property_keys</NAME>
<RETURNS>const gchar * const *</RETURNS>
GUdevDevice  *device 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_has_property</NAME>
<RETURNS>gboolean             </RETURNS>
GUdevDevice  *device, const gchar  *key 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_property</NAME>
<RETURNS>const gchar         *</RETURNS>
GUdevDevice  *device, const gchar  *key 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_property_as_int</NAME>
<RETURNS>gint                 </RETURNS>
GUdevDevice  *device, const gchar  *key 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_property_as_uint64</NAME>
<RETURNS>guint64              </RETURNS>
GUdevDevice  *device, const gchar  *key 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_property_as_double</NAME>
<RETURNS>gdouble              </RETURNS>
GUdevDevice  *device, const gchar  *key 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_property_as_boolean</NAME>
<RETURNS>gboolean             </RETURNS>
GUdevDevice  *device, const gchar  *key 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_property_as_strv</NAME>
<RETURNS>const gchar * const *</RETURNS>
GUdevDevice  *device, const gchar  *key 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_sysfs_attr</NAME>
<RETURNS>const gchar         *</RETURNS>
GUdevDevice  *device, const gchar  *name 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_sysfs_attr_as_int</NAME>
<RETURNS>gint                 </RETURNS>
GUdevDevice  *device, const gchar  *name 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_sysfs_attr_as_uint64</NAME>
<RETURNS>guint64              </RETURNS>
GUdevDevice  *device, const gchar  *name 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_sysfs_attr_as_double</NAME>
<RETURNS>gdouble              </RETURNS>
GUdevDevice  *device, const gchar  *name 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_sysfs_attr_as_boolean</NAME>
<RETURNS>gboolean             </RETURNS>
GUdevDevice  *device, const gchar  *name 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_sysfs_attr_as_strv</NAME>
<RETURNS>const gchar * const *</RETURNS>
GUdevDevice  *device, const gchar  *name 
</FUNCTION>
<FUNCTION>
<NAME>g_udev_device_get_tags</NAME>
<RETURNS>const gchar * const *</RETURNS>
GUdevDevice  *device 
</FUNCTION>
<STRUCT>
<NAME>GUdevDevicePrivate</NAME>
</STRUCT>
