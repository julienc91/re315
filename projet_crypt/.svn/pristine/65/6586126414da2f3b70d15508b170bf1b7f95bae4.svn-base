<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY version SYSTEM "version.xml">
]>
<refentry id="libudev-udev">
<refmeta>
<refentrytitle role="top_of_page" id="libudev-udev.top_of_page">udev</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  LIBUDEV Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>udev</refname>
<refpurpose>libudev context</refpurpose>
</refnamediv>

<refsynopsisdiv id="libudev-udev.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>struct              <link linkend="udev">udev</link>;
struct <link linkend="udev"><returnvalue>udev</returnvalue></link> *       <link linkend="udev-ref">udev_ref</link>                            (<parameter><type>struct udev</type> *udev</parameter>);
struct <link linkend="udev"><returnvalue>udev</returnvalue></link> *       <link linkend="udev-unref">udev_unref</link>                          (<parameter><type>struct udev</type> *udev</parameter>);
struct <link linkend="udev"><returnvalue>udev</returnvalue></link> *       <link linkend="udev-new">udev_new</link>                            (<parameter><type>void</type></parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="udev-set-log-fn">udev_set_log_fn</link>                     (<parameter><type>struct udev</type> *udev</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> (*log_fn) (struct udev *udev, int priority, const char *file, int line, const char *fn, const char *format, va_list args)</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="udev-get-log-priority">udev_get_log_priority</link>               (<parameter><type>struct udev</type> *udev</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="udev-set-log-priority">udev_set_log_priority</link>               (<parameter><type>struct udev</type> *udev</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> priority</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link> *              <link linkend="udev-get-userdata">udev_get_userdata</link>                   (<parameter><type>struct udev</type> *udev</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="udev-set-userdata">udev_set_userdata</link>                   (<parameter><type>struct udev</type> *udev</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *userdata</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="libudev-udev.description" role="desc">
<title role="desc.title">Description</title>
<para>
The context contains the default values read from the udev config file,
and is passed to all library operations.
</para>
</refsect1>
<refsect1 id="libudev-udev.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="udev" role="struct">
<title>struct udev</title>
<indexterm zone="udev"><primary sortas="">udev</primary></indexterm>
<programlisting>struct udev;</programlisting>
<para>
Opaque object representing the library context.
</para></refsect2>
<refsect2 id="udev-ref" role="function">
<title>udev_ref ()</title>
<indexterm zone="udev-ref"><primary sortas="ref">udev_ref</primary></indexterm>
<programlisting>struct <link linkend="udev"><returnvalue>udev</returnvalue></link> *       udev_ref                            (<parameter><type>struct udev</type> *udev</parameter>);</programlisting>
<para>
Take a reference of the udev library context.
</para><variablelist role="params">
<varlistentry><term><parameter>udev</parameter>&#160;:</term>
<listitem><simpara>udev library context</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the passed udev library context</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="udev-unref" role="function">
<title>udev_unref ()</title>
<indexterm zone="udev-unref"><primary sortas="unref">udev_unref</primary></indexterm>
<programlisting>struct <link linkend="udev"><returnvalue>udev</returnvalue></link> *       udev_unref                          (<parameter><type>struct udev</type> *udev</parameter>);</programlisting>
<para>
Drop a reference of the udev library context. If the refcount
reaches zero, the resources of the context will be released.
</para><variablelist role="params">
<varlistentry><term><parameter>udev</parameter>&#160;:</term>
<listitem><simpara>udev library context</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the passed udev library context if it has still an active reference, or <link linkend="NULL:CAPS"><type>NULL</type></link> otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="udev-new" role="function">
<title>udev_new ()</title>
<indexterm zone="udev-new"><primary sortas="new">udev_new</primary></indexterm>
<programlisting>struct <link linkend="udev"><returnvalue>udev</returnvalue></link> *       udev_new                            (<parameter><type>void</type></parameter>);</programlisting>
<para>
Create udev library context. This reads the udev configuration
file, and fills in the default values.
</para>
<para>
The initial refcount is 1, and needs to be decremented to
release the resources of the udev library context.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a new udev library context</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="udev-set-log-fn" role="function">
<title>udev_set_log_fn ()</title>
<indexterm zone="udev-set-log-fn"><primary sortas="set_log_fn">udev_set_log_fn</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                udev_set_log_fn                     (<parameter><type>struct udev</type> *udev</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> (*log_fn) (struct udev *udev, int priority, const char *file, int line, const char *fn, const char *format, va_list args)</parameter>);</programlisting>
<para>
The built-in logging writes to stderr. It can be
overridden by a custom function, to plug log messages
into the users' logging functionality.
</para><variablelist role="params">
<varlistentry><term><parameter>udev</parameter>&#160;:</term>
<listitem><simpara>udev library context</simpara></listitem></varlistentry>
<varlistentry><term><parameter>log_fn</parameter>&#160;:</term>
<listitem><simpara>function to be called for logging messages</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="udev-get-log-priority" role="function">
<title>udev_get_log_priority ()</title>
<indexterm zone="udev-get-log-priority"><primary sortas="get_log_priority">udev_get_log_priority</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 udev_get_log_priority               (<parameter><type>struct udev</type> *udev</parameter>);</programlisting>
<para>
The initial logging priority is read from the udev config file
at startup.
</para><variablelist role="params">
<varlistentry><term><parameter>udev</parameter>&#160;:</term>
<listitem><simpara>udev library context</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the current logging priority</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="udev-set-log-priority" role="function">
<title>udev_set_log_priority ()</title>
<indexterm zone="udev-set-log-priority"><primary sortas="set_log_priority">udev_set_log_priority</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                udev_set_log_priority               (<parameter><type>struct udev</type> *udev</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> priority</parameter>);</programlisting>
<para>
Set the current logging priority. The value controls which messages
are logged.
</para><variablelist role="params">
<varlistentry><term><parameter>udev</parameter>&#160;:</term>
<listitem><simpara>udev library context</simpara></listitem></varlistentry>
<varlistentry><term><parameter>priority</parameter>&#160;:</term>
<listitem><simpara>the new logging priority</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="udev-get-userdata" role="function">
<title>udev_get_userdata ()</title>
<indexterm zone="udev-get-userdata"><primary sortas="get_userdata">udev_get_userdata</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link> *              udev_get_userdata                   (<parameter><type>struct udev</type> *udev</parameter>);</programlisting>
<para>
Retrieve stored data pointer from library context. This might be useful
to access from callbacks like a custom logging function.
</para><variablelist role="params">
<varlistentry><term><parameter>udev</parameter>&#160;:</term>
<listitem><simpara>udev library context</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>stored userdata</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="udev-set-userdata" role="function">
<title>udev_set_userdata ()</title>
<indexterm zone="udev-set-userdata"><primary sortas="set_userdata">udev_set_userdata</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                udev_set_userdata                   (<parameter><type>struct udev</type> *udev</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *userdata</parameter>);</programlisting>
<para>
Store custom <parameter>userdata</parameter> in the library context.
</para><variablelist role="params">
<varlistentry><term><parameter>udev</parameter>&#160;:</term>
<listitem><simpara>udev library context</simpara></listitem></varlistentry>
<varlistentry><term><parameter>userdata</parameter>&#160;:</term>
<listitem><simpara>data pointer</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

</refentry>
