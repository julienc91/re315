/*-*- Mode: C; c-basic-offset: 8; indent-tabs-mode: nil -*-*/

/***
  This file is part of systemd.

  Copyright 2013 Lennart Poettering

  systemd is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation; either version 2.1 of the License, or
  (at your option) any later version.

  systemd is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with systemd; If not, see <http://www.gnu.org/licenses/>.
***/

#include <unistd.h>
#include <stdlib.h>

#include "efivars.h"
#include "path-util.h"
#include "util.h"
#include "mkdir.h"
#include "unit-name.h"

static const char *arg_dest = "/tmp";

int main(int argc, char *argv[]) {
        int r = EXIT_SUCCESS;
        sd_id128_t id;
        _cleanup_free_ char *what = NULL, *fsck = NULL;
        char *name;
        _cleanup_fclose_ FILE *f = NULL, *f2 = NULL;

        if (argc > 1 && argc != 4) {
                log_error("This program takes three or no arguments.");
                return EXIT_FAILURE;
        }

        if (argc > 1)
                arg_dest = argv[3];

        log_set_target(LOG_TARGET_SAFE);
        log_parse_environment();
        log_open();

        umask(0022);

        if (!is_efi_boot())
                return EXIT_SUCCESS;

        if (dir_is_empty("/boot") <= 0)
                return EXIT_SUCCESS;

        r = efi_loader_get_device_part_uuid(&id);
        if (r == -ENOENT)
                return EXIT_SUCCESS;
        if (r < 0) {
                log_error("Failed to read ESP partition UUID: %s", strerror(-r));
                return EXIT_FAILURE;
        }

        name = strappenda(arg_dest, "/boot.mount");
        f = fopen(name, "wxe");
        if (!f) {
                log_error("Failed to create mount unit file %s: %m", name);
                return EXIT_FAILURE;
        }

        r = asprintf(&what,
                     "/dev/disk/by-partuuid/%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",
                     SD_ID128_FORMAT_VAL(id));
        if (r < 0) {
                log_oom();
                return EXIT_FAILURE;
        }

        fsck = unit_name_from_path_instance("systemd-fsck", what, ".service");
        if (!fsck) {
                log_oom();
                return EXIT_FAILURE;
        }

        fprintf(f,
                "# Automatially generated by systemd-efi-boot-generator\n\n"
                "[Unit]\n"
                "Description=EFI System Partition\n"
                "Requires=%s\n"
                "After=%s\n"
                "\n"
                "[Mount]\n"
                "Where=/boot\n"
                "What=%s\n"
                "Options=umask=0077,noauto\n",
                fsck, fsck, what);

        name = strappenda(arg_dest, "/boot.automount");
        f2 = fopen(name, "wxe");
        if (!f2) {
                log_error("Failed to create automount unit file %s: %m", name);
                return EXIT_FAILURE;
        }

        fputs("# Automatially generated by systemd-efi-boot-generator\n\n"
              "[Unit]\n"
              "Description=EFI System Partition Automount\n\n"
              "[Automount]\n"
              "Where=/boot\n", f2);

        name = strappenda(arg_dest, "/local-fs.target.wants/boot.automount");
        mkdir_parents(name, 0755);

        if (symlink("../boot.automount", name) < 0) {
                log_error("Failed to create symlink %s: %m", name);
                return EXIT_FAILURE;
        }

        return EXIT_SUCCESS;
}
